{"ast":null,"code":"/*\n  Scanbot SDK Cordova Plugin\n  Copyright (c) 2017 doo GmbH. All rights reserved.\n */\n\nfunction cordova_exec(actionName, module) {\n  var func = function (successCallback, errorCallback, options) {\n    cordova.exec(successCallback, errorCallback, module, actionName, options ? [options] : []);\n  };\n  func.__is_cordova_wrapper__ = true;\n  return func;\n}\nfunction makeCaller(actionName) {\n  return cordova_exec(actionName, \"ScanbotSdk\");\n}\nfunction makeUiCaller(actionName) {\n  return cordova_exec(actionName, \"ScanbotSdkUi\");\n}\nfunction makeTestCaller(actionName) {\n  return cordova_exec(actionName, \"ScanbotSdkTest\");\n}\nvar API = {\n  UI: {\n    // Scanbot SDK UI functions:\n    startDocumentScanner: makeUiCaller(\"startDocumentScanner\"),\n    startFinderDocumentScanner: makeUiCaller(\"startFinderDocumentScanner\"),\n    startCroppingScreen: makeUiCaller(\"startCroppingScreen\"),\n    startBarcodeScanner: makeUiCaller(\"startBarcodeScanner\"),\n    startBatchBarcodeScanner: makeUiCaller(\"startBatchBarcodeScanner\"),\n    startMrzScanner: makeUiCaller(\"startMrzScanner\"),\n    startEHICScanner: makeUiCaller(\"startEHICScanner\"),\n    startLicensePlateScanner: makeUiCaller(\"startLicensePlateScanner\"),\n    startDataScanner: makeUiCaller(\"startDataScanner\"),\n    startGenericDocumentRecognizer: makeUiCaller(\"startGenericDocumentRecognizer\"),\n    startCheckRecognizer: makeUiCaller(\"startCheckRecognizer\")\n  },\n  // Scanbot SDK operations:\n  initializeSdk: makeCaller(\"initializeSdk\"),\n  getLicenseInfo: makeCaller(\"getLicenseInfo\"),\n  detectDocument: makeCaller(\"detectDocument\"),\n  applyImageFilter: makeCaller(\"applyImageFilter\"),\n  rotateImage: makeCaller(\"rotateImage\"),\n  createPdf: makeCaller(\"createPdf\"),\n  writeTiff: makeCaller(\"writeTiff\"),\n  performOcr: makeCaller(\"performOcr\"),\n  getOcrConfigs: makeCaller(\"getOcrConfigs\"),\n  createPage: makeCaller(\"createPage\"),\n  setDocumentImage: makeCaller(\"setDocumentImage\"),\n  detectDocumentOnPage: makeCaller(\"detectDocumentOnPage\"),\n  applyImageFilterOnPage: makeCaller(\"applyImageFilterOnPage\"),\n  getFilteredDocumentPreviewUri: makeCaller(\"getFilteredDocumentPreviewUri\"),\n  rotatePage: makeCaller(\"rotatePage\"),\n  removePage: makeCaller(\"removePage\"),\n  estimateBlur: makeCaller(\"estimateBlur\"),\n  detectBarcodesOnImage: makeCaller(\"detectBarcodesOnImage\"),\n  detectBarcodesOnImages: makeCaller(\"detectBarcodesOnImages\"),\n  cleanup: makeCaller(\"cleanup\"),\n  requestCameraPermission: makeCaller(\"requestCameraPermission\"),\n  refreshImageUris: makeCaller(\"refreshImageUris\"),\n  getImageData: makeCaller(\"getImageData\"),\n  recognizeCheckOnImage: makeCaller(\"recognizeCheckOnImage\"),\n  setLicenseFailureHandler: function (callback) {\n    cordova.exec(function (params) {\n      callback(params);\n    }, function () {}, \"ScanbotSdk\", \"setLicenseFailureHandler\", []);\n  },\n  // Scanbot SDK operations:\n  Test: {\n    saveFile: makeTestCaller(\"saveFile\")\n  }\n};\n(function () {\n  if (typeof Promise === \"function\") {\n    function promisify(func) {\n      return function (options) {\n        return new Promise(function (resolve, reject) {\n          func(resolve, reject, options);\n        });\n      };\n    }\n    function promisifyObject(obj) {\n      var wrapper = {};\n      for (var propName in obj) {\n        var prop = obj[propName];\n        /**\n         * TODO: Is this prop necessary? It prevents the normal callback needed for setLicenseFailureHandler\n         */\n        if (typeof prop === \"function\" /* && prop.__is_cordova_wrapper__*/) {\n          wrapper[propName] = promisify(prop);\n        }\n      }\n      return wrapper;\n    }\n    var promises = null;\n    API.promisify = function () {\n      if (!promises) {\n        promises = promisifyObject(API);\n        promises.UI = promisifyObject(API.UI);\n        promises.Test = promisifyObject(API.Test);\n      }\n      return promises;\n    };\n  }\n})();\nmodule.exports = API;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}